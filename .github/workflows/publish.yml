name: Build & Push docker image to ghcr.io

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/zowks/epitech-devcontainer
  IMAGE_TAG: ${{ github.ref_name == 'main' && 'latest' || 'nightly' }}


jobs:
  build:
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            platform: amd64
          - runner: self-hosted
            platform: arm64

    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: zowks
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          outputs: type=image,name=${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.platform }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1


  merge:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: zowks
          password: ${{ secrets.GHCR_PAT }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            $(printf '${{ env.IMAGE_NAME }}@sha256: %s ' *)
